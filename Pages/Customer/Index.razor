@page "/customer"
@inject ICustomerServices customerService
@attribute [Authorize]

<div class="row">
    <div class="col-lg-4 col-sm-12 mt-2">
        <div class="text-left mb-3">
            <button class="btn btn-outline-success" @onclick="MostrarFormulario">
                <span class="oi oi-plus"></span>
                
            </button>
        </div>
    </div>
    <div class="col-lg-4 col-sm-12 mt-2 text-center">
        <h2 class="text-center"><strong>Listado de Clientes</strong></h2>
    </div>
    <hr>
</div>

<div class="container-fluid mt-5">

    <div class="modal" style="display: @(ShowForm ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><b>@TituloForm</b></h5>
                    <button type="button" class="close btn btn-outline-danger" data-dismiss="modal" aria-label="Close" @onclick="Cancelar">
                        <span aria-hidden="true" class="oi oi-x"></span>
                    </button>
                </div>

                <EditForm Model="request" OnValidSubmit="Send">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="modal-body">

                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-person"></span>
                                </span>
                            </div>
                            <input type="text" placeholder="Full Name" id="nombre" class="form-control" 
                            @bind="@request.Name" required />
                        </div>

                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-phone"></span>
                                </span>
                            </div>
                            <input type="text" placeholder="Phone Number" id="nombre" class="form-control" 
                            @bind="@request.PhoneNumber" required />
                        </div>

                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-envelope-closed"></span>
                                </span>
                            </div>
                            <input type="text" placeholder="Email" id="email" class="form-control" 
                            @bind="@request.Email" required />
                        </div>
                    </div>

                    <div class="modal-footer">
                        <div class="btn-group">
                            <button type="submit" class="btn btn-outline-success">
                                <span class="oi oi-check"></span>
                            </button>
                        </div>
                    </div>

                </EditForm>

            </div>
        </div>
    </div>

    <div class="row d-flex justify-content-center">
        @foreach (var item in Customers)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 mt-2 text-center">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title"><b>@item.Name</b></h5>
                        <p class="card-text"><b>Teléfono:</b> @FormatPhoneNumber(item.PhoneNumber)</p>
                        <p class="card-text"><b>Email:</b> @item.Email</p>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-warning" @onclick="()=>Editar(item)">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger" @onclick="()=>Eliminar(item)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

@code {
    public string TituloForm => request.Id == 0 ? "AGREGAR CLIENTE" : "MODIFICAR CLIENTE";

    public bool ShowForm { get; set; } = false;
    public bool ShowDetails { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<CustomerResponse> Customers { get; set; } = new List<CustomerResponse>();
    public CustomerResponse SelectedCustomer { get; set; }

    public CustomerRequest request = new CustomerRequest();

    private string FormatPhoneNumber(string phoneNumber)
    {
        // Verifica si el número telefónico tiene la longitud esperada
        if (phoneNumber.Length == 10)
        {
            // Formatea el número telefónico
            return $"({phoneNumber.Substring(0, 3)}) {phoneNumber.Substring(3, 3)}-{phoneNumber.Substring(6)}";
        }
        else
        {
            // Devuelve el número telefónico sin cambios si no tiene la longitud esperada
            return phoneNumber;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarCustomers();
    }

    public async Task CargarCustomers()
    {
        var resultado = await customerService.Consultar(Filtro);
        if (resultado.Success)
        {
            Customers = resultado.Data;
        }
        else
        {
            // Mostrar mensaje de error
        }
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            var resultado = await customerService.Crear(request);
            if (resultado.Success)
            {
                Cancelar();
                await CargarCustomers();
            }
            else
            {
                // Mostrar mensaje de error
            }
        }
        else
        {
            var resultado = await customerService.Modificar(request);
            if (resultado.Success)
            {
                Cancelar();
                await CargarCustomers();
            }
            else
            {
                // Mostrar mensaje de error
            }
        }
    }

    public async Task Eliminar(CustomerResponse customer)
    {
        var resultado = await customerService.Eliminar(customer.ToRequest());
        if (resultado.Success)
        {
            await CargarCustomers();
        }
        else
        {
            // Mostrar mensaje de error
        }
    }

    void MostrarFormulario()
    {
        request = new CustomerRequest();
        ShowForm = true;
    }

    void Cancelar()
    {
        ShowForm = false;
        ShowDetails = false;
    }

    void Close()
    {
        ShowDetails = false;
    }
    void MostrarDetalles(int customerId)
    {
        SelectedCustomer = Customers.FirstOrDefault(c => c.Id == customerId);
        ShowDetails = true;
    }

    void Editar(CustomerResponse customer)
    {
        request = new CustomerRequest
            {
                Id = customer.Id,
                Name = customer.Name,
                PhoneNumber = customer.PhoneNumber,
                Email = customer.Email
            };
        ShowForm = true;
    }
}
 
