@page "/rentalInvoices"
@attribute [Authorize]

@if (!ShowForm)
{
    <div class="row">
        <div class="col-lg-3 col-sm-12 mt-2">
            <div class="text-left mb-3">
                <button class="btn btn-outline-success" @onclick="()=>{ShowForm = !ShowForm; Message = null;}">
                    <span class="oi oi-plus"></span>
                    
                </button>
            </div>
        </div>
        <div class="col-lg-6 col-sm-12 mt-2 text-center">
            <h2 class="text-center"><strong>Modulo de Facturas(@Invoices.Count)</strong></h2>
        </div>
        <hr>
    </div>
}
<div class="container-fluid mt-5">
    @if (ShowForm)
    {
        <div class="row">
            <div class="col-7">
                <h3><strong>@TituloForm</strong></h3>
            </div>
            <div class="col text-end">
                <button class="btn btn-outline-warning d-print-none" @onclick="UpdatePage">
                    <span class="oi oi-loop"></span>
                </button>
                <button @onclick="Cancelar" class="btn btn-outline-danger d-print-none">
                    <span class="oi oi-arrow-thick-left"></span>
                </button>
            </div>
        </div>
        <hr>

        <EditForm Model="request" OnValidSubmit="Send">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @*Selecciona el cliente*@
            <div class="mb-3 input-group">
                @if(request.Id > 0)
                {
                    <select class="form-control" @bind="request.CustomerId">
                        @foreach (var cliente in Customers)
                        {
                            <option value="@cliente.Id">@cliente.Name</option>
                        }
                    </select>
                }
                else
                {
                    <input class="form-control" placeholder="Cliente" aria-label="Cliente" 
                    aria-describedby="button-addon2" list="contactos" 
                    @bind="Nombre" 
                    @oninput="HandleCustomerSelection" required/>
                    <datalist id="contactos">
                        @foreach (var cliente in Customers)
                        {
                            <option value="@cliente.Name" />
                        }
                    </datalist>
                }
            </div>

            @*Detalla los datos de la renta, precio x dia, vehiculo, y fecha de retorno*@
            <div class="card">
                <div class="card-body">
                    <div class="mb-2 input-group">
                        @if(request.Id > 0)
                        {
                            <select class="form-control" @bind="request.VehicleId">
                                @foreach (var vehiculo in Vehicles)
                                {
                                    <option value="@vehiculo.Id">
                                        @($"{vehiculo.Make} {vehiculo.Model} {vehiculo.Year}")
                                    </option>
                                }
                            </select>
                        }
                        else{
                            <input class="form-control" placeholder="Vehiculo" aria-label="Vehiculo" 
                            aria-describedby="button-addon2" list="vehicles" 
                            @bind="CarName" 
                            @oninput="HandleVehicleSelection" required/>
                            <datalist id="vehicles">
                                @foreach (var vehiculo in Vehicles)
                                {
                                    <option value="@($"{vehiculo.Make} {vehiculo.Model} {vehiculo.Year}")" />
                                }
                            </datalist>
                        }
                    </div>

                    <div class="mb-2 input-group">
                        <label class="input-group-text">Price</label>
                        <InputNumber class="form-control" @bind-Value="@request.PriceDay"></InputNumber>
                    </div>

                    <div class="mb-2 input-group">
                        <label class="input-group-text">Rented</label>
                        <InputDate class="form-control" @bind-Value="@request.RentalDate"></InputDate>
                    </div>

                    <div class="mb-2 input-group">
                        <label class="input-group-text">Return</label>
                        <InputDate class="form-control" @bind-Value="@request.ReturnDate"></InputDate>
                    </div>
                    
                    @if (Message != null)
                    {
                        <div class="alert-warning">
                            <label class="text-dark"><strong>@Message</strong></label>
                        </div>
                    }

                </div>
            </div>

            @*Resumen de la venta*@
            <div class="card mt-2">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col input-group">
                            <label class="input-group-text"><strong>Resumen:</strong></label>
                            <input type="number" placeholder="Monto Pagado" id="montoPagado" @bind="@MontoPagado" class="form-control rounded" />
                        </div>
                        <div class="col-5 text-end">
                            <div class="d-print-none">
                                @if (!Paid)
                                {
                                    <button type="button" class="btn btn-outline-primary text-dark rounded" @onclick="CalculateTotalAmount">
                                        <strong>Calcular</strong>
                                    </button>
                                }
                                else
                                {
                                    <button type="submit" class="btn btn-outline-warning text-dark rounded">
                                        <strong>Pagar</strong>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body text-center">
                    

                    <ul class="list-unstyled float-end me-0">
                        <li>
                            <span class="float-start" style="margin-right: 35px;"><strong>Días Rentados:</strong> </span>
                            <i class="fas fa-dollar-sign">@request.RentedDays</i>
                        </li>
                        <li> 
                            <span class="me-3"><strong>Sub-Total:</strong></span>
                            <i class="fas fa-dollar-sign">@($"{(request.TotalAmount - request.ITBIS):N2}")</i>
                        </li>
                        <li> 
                            <span class="me-5"><strong>ITBIS:</strong></span>
                            <i class="fas fa-dollar-sign">$@request.ITBIS.ToString("N2")</i>
                        </li>
                        <li>
                            <span class="me-3 float-start"><strong>Importe:</strong></span>
                            <i class="fas fa-dollar-sign">$@request.TotalAmount.ToString("N2")</i>
                        </li>
                    </ul>

                </div>
            </div>
        </EditForm>
        <br />
    }
    else
    {

        <div class="row d-flex justify-content-center">
            @if (Invoices.Any())
            {
                @foreach (var invoice in Invoices)
                {
                    <div class="col-lg-4 col-md-6 col-sm-12 mt-2 text-center">
                        <div class="card" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title"><b>Invoice N°: @invoice.Id</b></h5>
                                <div class="card-text">
                                    <small><b>Customer:</b> @invoice.NombreCustomerTexto</small>
                                    <br>
                                    <small><b>Vehicle:</b> @invoice.NombreVehicleTexto</small>
                                    <br>
                                    <details>
                                        <small><b>Rental Date:</b> @invoice.RentalDate.ToString("yyyy-MM-dd")</small>
                                        <br>
                                        <small><b>Return Date:</b> @invoice.ReturnDate.ToString("yyyy-MM-dd")</small>
                                        <br>
                                        <small><b>Rented Days:</b> @invoice.RentedDays</small>
                                        <br>
                                        <small><b>Total Amount:</b> $@invoice.TotalAmount.ToString("N2")</small>
                                    </details>
                                </div>
                            </div>
                            <div class="card-footer text-end">
                                <button class="btn btn-info">
                                    <span class="oi oi-action-redo"></span>
                                </button>
                                <button @onclick="()=>Seleccionar(invoice.Id)"
                                        class="btn btn-warning">
                                    <span class="oi oi-pencil"></span>
                                </button>
                                <button @onclick="()=>Eliminar(invoice)"
                                        class="btn btn-danger">
                                    <span class="oi oi-trash"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12 text-center mt-5">
                    <div class="card text-white bg-secondary">
                        <div class="card-body">
                            <h4 class="card-title">¡Ups! No hay vehículos rentados.</h4>
                            <p class="card-text">Parece que no hay vehículos que coincidan con tus criterios.</p>
                            <img src="logo1.jpeg" alt="No hay vehículos rantados" 
                            class="rounded-circle img-fluid mt-3" style="max-width: 150px;">
                            <!-- You can replace the image with an icon or any graphic you prefer -->
                        </div>
                    </div>
                </div>
            }
        </div>

    }
</div>
@code {
    public string TituloForm => request.Id == 0 ?
    "RENTAR VEHICULO" : "MODIFICAR RENTA";

    public string Nombre { get; set; } = string.Empty;
    public string CarName { get; set; } = string.Empty;
    public decimal MontoPagado { get; set; }
    public bool ShowForm { get; set; } = false;
    public bool Details { get; set; } = false;
    public bool Paid { get; set; } = false;
    public string Filtro { get; set; } = "";
    public string Message { get; set; } = "";
    public decimal TotalPagar { get; set; } = 0;

    void CloseDeatils()
    {
        Details = false;
    }

    void OpenDeatils()
    {
        Details = true;
    }
    
    public List<RentalInvoiceResponse> Invoices { get; set; }
        = new List<RentalInvoiceResponse>();
    public List<CustomerResponse> Customers { get; set; } = new();
    public List<VehicleResponse> Vehicles { get; set; } = new List<VehicleResponse>();

    public RentalInvoiceRequest request { get; set; } = new RentalInvoiceRequest();

    void BuscarSeleccionarCliente(string Customer)
    {
        var c = Customers.FirstOrDefault(p => p.Name == Customer)!;
        if (c != null) request.CustomerId = c.Id;
    }
    void HandleCustomerSelection(ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            var selectedCustomer = args.Value.ToString();
            BuscarSeleccionarCliente(selectedCustomer);
        }
    }

    void BuscarSeleccionarCar(string Car)
    {
        var c = Vehicles.FirstOrDefault(p => $"{p.Make} {p.Model} {p.Year}" == Car);
        if (c != null) 
        {
            request.VehicleId = c.Id;
        }
    }
    void HandleVehicleSelection(ChangeEventArgs args)
    {
        var selectedCar = args.Value.ToString();
        BuscarSeleccionarCar(selectedCar);
    }

    void CalculateTotalAmount()
    {
        if (string.IsNullOrEmpty(Nombre))
        {
            Message = "😒 Debes seleccionar un cliente. 🙍‍♂️";
            return;
        }

        if (string.IsNullOrEmpty(CarName))
        {
            Message = "😒 Debes seleccionar un vehiculo. 🚗";
            return;
        }
        DateTime startDate = request.RentalDate;
        DateTime endDate = request.ReturnDate;

        Message = null;
        Paid = true;
    }

    void Cancel()
    {
        ShowForm = true;
        Paid = false;
    }
    void Cancelar()
    {
        request = new RentalInvoiceRequest();
        ShowForm = false;
        Paid = false;
        MontoPagado = 0;
    }
    protected override async Task OnInitializedAsync()
    {
        await CargarVehiculos();
        await CargarClientes();
        await CargarFacturas();
    }

    async Task CargarClientes()
    {
        var resultado = await customerServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Customers = resultado.Data!;
            StateHasChanged(); // Actualizar la interfaz de usuario
        }
    }

    async Task CargarVehiculos()
    {
        var resultado = await vehicleServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Vehicles = resultado.Data!;
            StateHasChanged(); // Actualizar la interfaz de usuario
        }
    }

    async Task CargarFacturas()
    {
        var resultado = await rentalInvoiceServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Invoices = resultado.Data!;
            StateHasChanged(); // Actualizar la interfaz de usuario
        }
        else
        {
            // Manejar error
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        var selectedInvoice = Invoices.FirstOrDefault(c => c.Id == Id);
        if (selectedInvoice != null)
        {
            request.Id = selectedInvoice.Id;
            request.CustomerId = selectedInvoice.CustomerId;
            request.VehicleId = selectedInvoice.VehicleId;
            request.PriceDay = selectedInvoice.PriceDay;
            request.RentalDate = selectedInvoice.RentalDate;
            request.ReturnDate = selectedInvoice.ReturnDate;
            // Asegúrate de que las propiedades del modelo request se asignen correctamente

            DateTime startDate = request.RentalDate;
            DateTime endDate = request.ReturnDate;

            HandleCustomerSelection(new ChangeEventArgs());

            Message = null;
        }
    }

    public async Task Eliminar(RentalInvoiceResponse invoice)
    {
        var resultado = await rentalInvoiceServices.Eliminar(invoice.ToRequest());
        if (resultado.Success)
        {
            var markAsRentedResult = await vehicleServices.MarkAsRented(invoice.VehicleId);
            await CargarFacturas();
            StateHasChanged();
        }
    }

    void UpdatePage()
    {
        // Limpiar los campos y reiniciar variables
        request = new RentalInvoiceRequest();
        TotalPagar = 0;

        Paid = false;
        Message = null;
    }

    public async Task Send()
    {
        // Verificar si MontoPagado es menor que TotalPagar
        if (MontoPagado < TotalPagar)
        {
            Message = "😒 El monto pagado es menor que el total a pagar. 💰";
            return;
        }
        Message = null;

        bool isCreateRequest = (request.Id == 0);

        if (isCreateRequest)
        {
            var r = await rentalInvoiceServices.Crear(request);
            if (r.Success)
            {
                var markAsRentedResult = await vehicleServices.MarkAsRented(request.VehicleId);
                Cancelar();
                await CargarFacturas();
            }
            else
            {
                // Manejar error
            }
        }
        else
        {
            var markAsRentedResult = await vehicleServices.MarkAsRented(request.VehicleId);
            var r = await rentalInvoiceServices.Modificar(request);
            if (r.Success)
            {
                // Llamar a MarkAsRented después de modificar la factura de alquiler
                Cancelar();
                await CargarFacturas();
            }
            else
            {
                // Manejar error
            }
        }

        StateHasChanged(); // Actualizar la interfaz de usuario
    }

    

}