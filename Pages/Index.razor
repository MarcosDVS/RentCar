@page "/"
@using RentCar.Data.Request;
@using RentCar.Data.Response;
@using RentCar.Authentication;
@inject IUserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider

<PageTitle>RentCar</PageTitle>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .login-form {
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        background-color: white; /* Set a background color for the form */
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        width: 100%;
    }

    .login-form h2 {
        text-align: center;
        color: #333;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        font-size: 14px;
        color: #555;
    }
    .form-control {
        width: 100%;
        padding: 8px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        background-color: #3498db;
        color: #fff;
        border: none;
        padding: 10px;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
    }

    .btn-secondary {
        background-color: #e74c3c;
        color: #fff;
        border: none;
        padding: 10px;
        border-radius: 4px;
        cursor: pointer;
        width: 100%;
    }

    .btn-secondary:hover {
        background-color: #c0392b;
    }

    p {
        text-align: center;
        margin-top: 15px;
        font-size: 14px;
        color: #555;
    }

    a {
        color: #3498db;
        cursor: pointer;
    }

    a:hover {
        text-decoration: underline;
    }

    .welcome-message {
        text-align: center;
        font-size: 18px;
        color: #333;
    }
</style>

<div class="login-container">
    <div class="login-form">
        @if(!NewUser)
        {
            <form>
                <div class="text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                        <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z" />
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z" />
                    </svg>
                </div>
                <h2><strong>Iniciar sesión</strong></h2>
                @if (mensajeError != null)
                {
                    <div class="alert alert-warning text-center">
                        <label class="text-dark"><strong>@mensajeError</strong></label>
                    </div>
                }
                <br>
                <div class="form-group">
                    <input placeholder="User Name" type="email" class="form-control" id="username" 
                        @bind="model.UserName" required>
                </div>
                <div class="form-group">
                    <input placeholder="Password" type="password" class="form-control" id="password" 
                        @bind="model.Password" required>
                </div>
                <button type="button" class="btn btn-primary" @onclick="Authenticate">Iniciar sesión</button>
                <p>
                    ¿Aún no tienes una cuenta? 
                    <a href="#" @onclick="()=> {
                        NewUser=true;
                        mensajeError = null;}">Crear Usuario
                    </a>
                </p>
                
            </form>
        }
        else
        {
            <form>
                <div class="text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                        <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z" />
                        <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z" />
                    </svg>
                </div>
                <h2><strong>Registrarme</strong></h2>
                @if (mensajeError != null)
                {
                    <div class="alert alert-warning text-center">
                        <label class="text-dark"><strong>@mensajeError</strong></label>
                    </div>
                }
                <br>
                <div class="form-group">
                    <input placeholder="Full Name" type="text" class="form-control" id="username" 
                        @bind="request.Name" pattern=".{3,}" title="Full Name must be at least 3 characters" required>
                </div>
                <div class="form-group">
                    <input placeholder="User Name" type="email" class="form-control" id="username" 
                        @bind="request.Username" required>
                </div>
                <div class="form-group">
                    <input placeholder="Password" type="password" class="form-control" id="password" 
                        @bind="request.Password" required>
                </div>
                <button type="button" class="btn btn-primary" @onclick="Send">Register</button>
                <p>
                    Ya tengo una cuenta 
                    <a href="#" @onclick="()=> {NewUser=false; 
                        request = new UserRequest(); 
                        mensajeError = null;}">Back
                    </a>
                </p>
                
            </form>
        }
    </div>
</div>

@code {
    public UserRequest request { get; set; } = new();
    public List<UserResponse> Users { get; set; } = new();
    public string Filtro { get; set; } = "";
    private string mensajeError = null;
    private bool NewUser = false;
    private LoginModel model = new LoginModel();

    private class LoginModel
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private async Task Authenticate()
    {
        if (string.IsNullOrWhiteSpace(model.UserName) || string.IsNullOrWhiteSpace(model.Password))
        {
            mensajeError = "Complete Los Campos Patrón 😒";
            
        }
        else
        {
            var userAccount = userAccountService.GetByUserName(model.UserName.ToLower());
            if(userAccount == null || userAccount.Password != model.Password)
            {
                mensajeError = "Las Credenciales Son Incorrectas ❌";
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.Username,
                    Name = userAccount.Name
                    //Role = userAccount.Role
                });
                mensajeError = null;
            urlHelper.NavigateTo("/main", true);
        }
        
    }

    protected override async Task OnInitializedAsync()
    {
        // Llamada a CrearUsuarioAdmin antes de intentar autenticar
        await userServices.CreatUser();
        // Resto de tu código OnInitializedAsync
        await CargarUsuarios();
    }
    async Task CargarUsuarios()
    {
        var resultado =
        await userServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Users = resultado.Data!;
        }
    }

    public async Task Send()
    {
        // Verificar si el correo electrónico ya existe en la base de datos
        var existingUser = Users.FirstOrDefault(u => u.Username.Equals(request.Username, StringComparison.OrdinalIgnoreCase));
        if (existingUser != null)
        {
            mensajeError = "Patron el correo electrónico ya existe 🤨";
            return;
        }
        if (string.IsNullOrEmpty(request.Name))
        {
            mensajeError = "😒 Ingrese su nombre completa. 🙍‍♂️";
            return;
        }
        if (string.IsNullOrEmpty(request.Username))
        {
            mensajeError = "😒 Ingrese su Email. 📧";
            return;
        }
        if (string.IsNullOrEmpty(request.Password))
        {
            mensajeError = "😒 Ingrese su contraseña. 🔑";
            return;
        }
        if (request.Password.Length < 4 || request.Password.Length > 8)
        {
            mensajeError = "😒 La contraseña debe tener entre 4 y 8 caracteres. 🔑";
            return;
        }
        if (request.Id == 0)
        {
            
            mensajeError = null;
            request.Role = "user";
            //Debo registrar el contacto..
            var r = await userServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarUsuarios();
                StateHasChanged();
            }
        }
    }
    void Cancelar()
    {
        NewUser = false;
        request = new UserRequest();
    }
}