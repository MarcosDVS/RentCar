@page "/employee"
@inject IEmployeeServices employeeService
@inject IJSRuntime JS
@attribute [Authorize]

<div class="row">
    <div class="col-lg-3 col-sm-12 mt-2">
        <div class="text-left mb-3">
            <button class="btn btn-outline-success" @onclick="MostrarFormulario">
                <span class="oi oi-plus"></span>
                
            </button>
        </div>
    </div>
    <div class="col-lg-6 col-sm-12 mt-2 text-center">
        <h2 class="text-center"><strong>Listado de Empleados</strong></h2>
    </div>
    <hr>
</div>

<div class="container-fluid mt-5">

    <div class="modal" style="display: @(ShowForm ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><b>@TituloForm</b></h5>
                    <button type="button" class="close btn btn-outline-danger" data-dismiss="modal" aria-label="Close" @onclick="Cancelar">
                        <span aria-hidden="true" class="oi oi-x"></span>
                    </button>
                </div>

                <EditForm Model="request" OnValidSubmit="Send">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="modal-body">

                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-person"></span>
                                </span>
                            </div>
                            <input type="text" placeholder="Full Name" id="nombre" class="form-control" 
                            @bind="@request.Name" required />
                        </div>

                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-briefcase"></span>
                                </span>
                            </div>
                            <input type="text" placeholder="Position Job" id="job" class="form-control" 
                            @bind="@request.Position" required />
                        </div>

                        <div class="form-group input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-white text-black border-0">
                                    <span class="oi oi-dollar"></span>
                                </span>
                            </div>
                            <input type="text" placeholder="Position Job" id="salary" class="form-control" 
                            @bind="@request.Salary" required />
                        </div>

                    </div>

                    <div class="modal-footer">
                        <div class="btn-group">
                            <button type="submit" class="btn btn-outline-success">
                                <span class="oi oi-check"></span>
                            </button>
                        </div>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>

    <div class="row d-flex justify-content-center">
        @foreach (var employee in Employees)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 mt-2 text-center">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">
                            <span class="oi oi-person"></span>
                            <b>@employee.Name</b>
                        </h5>
                        <small class="card-text"><b>Posición:</b> @employee.Position</small>
                        <br>
                        <small class="card-text"><b>Salary:</b> $@employee.Salary.ToString("N2")</small>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-warning" @onclick="()=>Editar(employee)">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger" @onclick="async ()=>{await Eliminar(employee);}">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

@code {
    public string TituloForm => request.Id == 0 ? "AGREGAR EMPLEADO" : "MODIFICAR EMPLEADO";

    public bool ShowForm { get; set; } = false;
    public bool ShowDetails { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<EmployeeResponse> Employees { get; set; } = new List<EmployeeResponse>();
    public EmployeeResponse SelectedEmployee { get; set; }

    public EmployeeRequest request = new EmployeeRequest();

    protected override async Task OnInitializedAsync()
    {
        await CargarEmployees();
    }

    public async Task CargarEmployees()
    {
        var resultado = await employeeService.Consultar(Filtro);
        if (resultado.Success)
        {
            Employees = resultado.Data;
        }
        else
        {
            // Manejar el error, mostrar mensaje o realizar alguna acción
        }
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            var resultado = await employeeService.Crear(request);
            if (resultado.Success)
            {
                await CargarEmployees();
                ShowForm = false;
            }
            else
            {
                // Manejar el error, mostrar mensaje o realizar alguna acción
            }
        }
        else
        {
            var resultado = await employeeService.Modificar(request);
            if (resultado.Success)
            {
                await CargarEmployees();
                ShowForm = false;
            }
            else
            {
                // Manejar el error, mostrar mensaje o realizar alguna acción
            }
        }
    }

    public void Cancelar()
    {
        ShowForm = false;
        ShowDetails = false;
        request = new EmployeeRequest();
    }

    public void MostrarFormulario()
    {
        ShowForm = true;
        ShowDetails = false;
        request = new EmployeeRequest();
    }

    void Close()
    {
        ShowDetails = false;
    }
    public async Task MostrarDetalles(int employeeId)
    {
        ShowForm = false;
        ShowDetails = true;
        SelectedEmployee = Employees.FirstOrDefault(e => e.Id == employeeId);
    }

    public void Editar(EmployeeResponse employee)
    {
        ShowForm = true;
        ShowDetails = false;
        request = new EmployeeRequest
            {
                Id = employee.Id,
                Name = employee.Name,
                Position = employee.Position,
                Salary = employee.Salary
            };
    }

    public async Task Eliminar(EmployeeResponse user)
    {
        var resultado = await employeeService.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await CargarEmployees();
            StateHasChanged();
        }
    }
}
