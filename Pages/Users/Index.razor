@page "/usuarios"
@attribute [Authorize]

<div class="row">
    <div class="col-lg-3 col-sm-12 mt-2">
        <div class="text-left mb-3">
            <button class="btn btn-outline-success" @onclick="MostrarFormulario">
                <span class="oi oi-plus"></span>
                
            </button>
        </div>
    </div>
    <div class="col-lg-6 col-sm-12 mt-2 text-center">
        <h2 class="text-center"><strong>Listado de Usuarios</strong></h2>
    </div>
    <hr>
</div>

<div class="container-fluid mt-5">

    <div class="modal" style="display: @(ShowForm ? "block" : "none"); background-color: rgba(0, 0, 0, 0.5);" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><b>@TituloForm</b></h5>
                    <button type="button" class="close btn btn-outline-danger" data-dismiss="modal" aria-label="Close" @onclick="Cancelar">
                        <span aria-hidden="true" class="oi oi-x"></span>
                    </button>
                </div>

                <EditForm Model="request" OnValidSubmit="Send">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="modal-body">
                        @if (Message != null)
                        {
                            <div class="alert-warning text-center">
                                <label class="text-dark"><strong>@Message</strong></label>
                            </div>
                        }
                        <div class="form-group input-group mb-3">
                            <span class="input-group-text bg-white text-black">
                                <span class="oi oi-person"></span>
                            </span>
                            <input type="text" placeholder="Full Name" id="nombre" class="form-control" 
                            @bind="@request.Name" pattern=".{3,}" title="Full Name must be at least 3 characters" required />
                        </div>

                        <div class="form-group input-group mb-3">
                            <span class="input-group-text bg-white text-black">
                                <span class="oi oi-envelope-closed"></span>
                            </span>
                            <input type="email" placeholder="Email" id="email" class="form-control" 
                            @bind="@request.Username" required />
                        </div>

                        <div class="form-group input-group mb-3">
                            <span class="input-group-text bg-white text-black">
                                <span class="oi oi-code"></span>
                            </span>
                            <input type="text" placeholder="Password" id="pasword" class="form-control" 
                            @bind="@request.Password" required />
                        </div>

                        <div class="form-group input-group mb-3">
                            <span class="input-group-text bg-white text-black">
                                <span class="oi oi-badge"></span>
                            </span>
                            <select name="" id="" @bind="@request.Role" class="form-select" required title="Debes seleccionar un role">
                                <option value="" disabled selected>Elige un role</option>
                                <option value="admin">Administrador</option>
                                <option value="user">Usuario</option>
                            </select>
                        </div>
                        
                    </div>

                    <div class="modal-footer">
                        <div class="btn-group">
                            <button type="submit" class="btn btn-outline-success">
                                <span class="oi oi-check"></span>
                            </button>
                        </div>
                    </div>

                </EditForm>

            </div>
        </div>
    </div>

    
    <div class="row d-flex justify-content-center">
        @foreach (var row in Users)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 mt-2 text-center">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <h5 class="card-title">
                                <span class="oi oi-person"></span>
                                <b>@row.Name</b>
                            </h5>
                        </div>
                        <details>
                            <small class="card-text"><b>Email:</b> @row.Username</small>
                            <br>
                            <small><strong>Password:</strong> @row.Password</small>
                            <br>
                            <small><strong>Role:</strong> @row.Role</small>
                        </details>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-warning" @onclick="()=>Editar(row)">
                            <span class="oi oi-pencil"></span>
                        </button>
                        <button class="btn btn-danger" @onclick="()=>Eliminar(row)">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

</div>
@code {
    public string TituloForm => request.Id == 0 ?
    "AGREGAR USUARIO" : "MODIFICAR USUARIO";

    public bool ShowForm { get; set; } = false;
    public bool ShowDetails { get; set; } = false;
    public string Filtro { get; set; } = "";
    public string Message { get; set; } = null;
    public List<UserResponse> Users { get; set; }
        = new List<UserResponse>();
    public UserResponse SelectedUser { get; set; }


    public UserRequest request { get; set; } = new UserRequest();

    void Cancelar()
    {
        request = new UserRequest();
        ShowForm = false;
        Message = null;
    }
    async Task CargarUsuarios()
    {
        var resultado =
        await userServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Users = resultado.Data!;
        }
    }

    void Close()
    {
        ShowDetails = false;
    }
    public async Task MostrarDetalles(int userId)
    {
        ShowForm = false;
        ShowDetails = true;
        SelectedUser = Users.FirstOrDefault(u => u.Id == userId);
    }

    public void Editar(UserResponse user)
    {
        ShowForm = true;
        ShowDetails = false;
        request = new UserRequest
            {
                Id = user.Id,
                Name = user.Name,
                Username = user.Username,
                Password = user.Password,
                Role = user.Role
            };
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    public async Task Send()
    {
        if (request.Name.Length < 4)
        {
            Message = "😒 Ingrese su nombre completa. 🙍‍♂️";
            return;
        }
        if (request.Password.Length < 4 || request.Password.Length > 8)
        {
            Message = "😒 La contraseña debe tener entre 4 y 8 caracteres. 🔑";
            return;
        }
        if (request.Id == 0)
        {
            // Verificar si el correo electrónico ya existe en la base de datos
            var existingUser = Users.FirstOrDefault(u => u.Username.Equals(request.Username, StringComparison.OrdinalIgnoreCase));
            if (existingUser != null)
            {
                Message = "Patron el correo electrónico ya existe 🤨";
                return;
            }
            //Debo registrar el contacto..
            var r = await userServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarUsuarios();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await userServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarUsuarios();
                StateHasChanged();
            }
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        request = Users
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new UserRequest();
    }

    public async Task Eliminar(UserResponse user)
    {
        var resultado = await userServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await CargarUsuarios();
            StateHasChanged();
        }
    }
    void MostrarFormulario()
    {
        request = new UserRequest();
        ShowForm = true;
    }

}