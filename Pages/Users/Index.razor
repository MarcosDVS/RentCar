@page "/usuarios"
@attribute [Authorize]

<div class="container-fluid mt-5">
    <h2 class="text-center"><strong>Listado de Usuarios</strong></h2>
    <hr>
    @if (!ShowForm)
    {
        <div class="text-left mb-3">
            <button class="btn btn-success" @onclick="MostrarFormulario">
                <span class="oi oi-plus"></span>
                Nuevo Usuario
            </button>
        </div>
    }

    @if (ShowForm)
    {
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">@TituloForm</h3>
            </div>
            <div class="card-body">
                <EditForm Model="request" OnValidSubmit="Send">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="nombre" class="form-label">Nombre</label>
                        <InputText id="nombre" class="form-control" @bind-Value="@request.Name" required />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Teléfono</label>
                        <InputText id="email" class="form-control" @bind-Value="@request.Username" required />
                    </div>

                    <div class="mb-3">
                        <label for="pasword" class="form-label">Correo electrónico</label>
                        <InputText id="pasword" class="form-control" @bind-Value="@request.Password" required />
                    </div>

                    <div class="text-end">
                        <button type="submit" class="btn btn-outline-success">Guardar</button>
                        <button type="button" class="btn btn-outline-danger ms-2" @onclick="Cancelar">Cancelar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
    else
    {
        <div class="row d-flex justify-content-center">
            @foreach (var row in Users)
            {
                <div class="col-lg-4 col-md-6 col-sm-12 mt-2 text-center">
                    <div class="card">
                        <div class="card-body">
                            <div class="row">
                                <span class="oi oi-person"></span>
                                <h5 class="card-title"><b>@row.Name</b></h5>
                            </div>
                            <p class="card-text"><b>Email:</b> @row.Username</p>
                        </div>
                        <div class="card-footer">
                            <small><strong>Password:</strong> @row.Password</small>
                            <br>
                            <button class="btn btn-warning" @onclick="()=>Editar(row)">
                                <span class="oi oi-pencil"></span>
                            </button>
                            <button class="btn btn-danger" @onclick="()=>Eliminar(row)">
                                <span class="oi oi-trash"></span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>
@code {
    public string TituloForm => request.Id == 0 ?
    "Agregar usuario" : "Modificar usuario";

    public bool ShowForm { get; set; } = false;
    public bool ShowDetails { get; set; } = false;
    public string Filtro { get; set; } = "";
    public List<UserResponse> Users { get; set; }
        = new List<UserResponse>();
    public UserResponse SelectedUser { get; set; }


    public UserRequest request { get; set; } = new UserRequest();

    void Cancelar()
    {
        request = new UserRequest();
        ShowForm = false;
    }
    async Task CargarUsuarios()
    {
        var resultado =
        await userServices.Consultar(Filtro);
        if (resultado.Success)
        {
            Users = resultado.Data!;
        }
    }

    void Close()
    {
        ShowDetails = false;
    }
    public async Task MostrarDetalles(int userId)
    {
        ShowForm = false;
        ShowDetails = true;
        SelectedUser = Users.FirstOrDefault(u => u.Id == userId);
    }

    public void Editar(UserResponse user)
    {
        ShowForm = true;
        ShowDetails = false;
        request = new UserRequest
            {
                Id = user.Id,
                Name = user.Name,
                Username = user.Username,
                Password = user.Password
            };
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }

    public async Task Send()
    {
        if (request.Id == 0)
        {
            //Debo registrar el contacto..
            var r = await userServices.Crear(request);
            if (r.Success)
            {
                Cancelar();
                await CargarUsuarios();
                StateHasChanged();
            }
        }
        else
        {
            //Debo solicitar modificar el contacto...
            var r = await userServices.Modificar(request);
            if (r.Success)
            {
                Cancelar();
                await CargarUsuarios();
                StateHasChanged();
            }
        }
    }

    public void Seleccionar(int Id)
    {
        ShowForm = true;
        request = Users
        .Where(c => c.Id == Id)
        .Select(c => c.ToRequest())
        .FirstOrDefault() ?? new UserRequest();
    }

    public async Task Eliminar(UserResponse user)
    {
        var resultado = await userServices.Eliminar(user.ToRequest());
        if (resultado.Success)
        {
            await CargarUsuarios();
            StateHasChanged();
        }
    }
    void MostrarFormulario()
    {
        request = new UserRequest();
        ShowForm = true;
    }

}